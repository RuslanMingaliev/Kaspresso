package com.kaspersky.kaspressample.device_tests

import android.Manifest
import android.content.res.Configuration
import androidx.test.rule.ActivityTestRule
import androidx.test.rule.GrantPermissionRule
import com.agoda.kakao.screen.Screen
import com.kaspersky.kaspressample.MainActivity
import com.kaspersky.kaspressample.screen.MainScreen
import com.kaspersky.kaspresso.device.exploit.Exploit
import com.kaspersky.kaspresso.testcases.api.testcase.TestCase
import org.junit.Assert.assertEquals
import org.junit.Assert.assertNull
import org.junit.Rule
import org.junit.Test

class DeviceExploitSampleTest : TestCase() {

    companion object {
        const val SETTINGS_CHANGE_DELAY = 1_500L
    }

    @get:Rule
    val runtimePermissionRule: GrantPermissionRule = GrantPermissionRule.grant(
        Manifest.permission.WRITE_EXTERNAL_STORAGE,
        Manifest.permission.READ_EXTERNAL_STORAGE
    )

    @get:Rule
    val activityTestRule = ActivityTestRule(MainActivity::class.java, true, true)

    @Test
    fun exploitSampleTest() {
        before {
            device.exploit.setOrientation(Exploit.DeviceOrientation.Portrait)
            device.exploit.setAutoRotationEnabled(true)
        }.after {
            device.exploit.setOrientation(Exploit.DeviceOrientation.Portrait)
            device.exploit.setAutoRotationEnabled(true)
        }.run {

            step("Change orientation manually") {
                device.exploit.setOrientation(Exploit.DeviceOrientation.Landscape)
                flakySafely {
                    assertEquals(
                        Configuration.ORIENTATION_LANDSCAPE,
                        activityTestRule.activity.resources.configuration.orientation
                    )
                }

                device.exploit.setOrientation(Exploit.DeviceOrientation.Portrait)
                flakySafely {
                    assertEquals(
                        Configuration.ORIENTATION_PORTRAIT,
                        activityTestRule.activity.resources.configuration.orientation
                    )
                }
            }

            step("Rotate device") {
                device.exploit.rotate()
                flakySafely {
                    assertEquals(
                        Configuration.ORIENTATION_LANDSCAPE,
                        activityTestRule.activity.resources.configuration.orientation
                    )
                }
            }

            step("Disable auto rotation") {
                device.exploit.setOrientation(Exploit.DeviceOrientation.Portrait)
                Screen.idle(SETTINGS_CHANGE_DELAY)
                device.exploit.setAutoRotationEnabled(false)
                Screen.idle(SETTINGS_CHANGE_DELAY)
                device.exploit.rotate() // Won't rotate
                flakySafely {
                    assertEquals(
                        Configuration.ORIENTATION_PORTRAIT,
                        activityTestRule.activity.resources.configuration.orientation
                    )
                }
            }

            step("Press back button") {
                MainScreen {
                    webViewButton {
                        click()
                    }
                }

                device.exploit.pressBack(true)
                device.activities.isCurrent(MainActivity::class.java) // Asserts that MainActivity is resumed
            }

            step("Press home button") {
                device.exploit.pressHome()
                assertNull(device.activities.getResumed())
            }
        }
    }
}